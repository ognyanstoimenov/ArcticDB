name: Create next release branch

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target version to compare. If omitted, the latest release from github will be used. Exmaple: v1.2.3'
        required: false

jobs:
  get-prs:
    name: Parse PRs for major/minor/patch labels
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    outputs:
      new_branch: ${{ steps.new-branch.outputs.new_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Get latest release"
        if: ${{ inputs.target == '' }}
        id: get_latest_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          exclude_types: "draft|prerelease"

      - name: Verify branch format using git
        id: verify_branch
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ inputs.target || steps.get_latest_release.outputs.tag_name }}';
            const targetPattern = /^v(\d+)\.(\d+)\.(\d+)$/;

            if (targetPattern.test(target)) {
              const targetBranch = target.slice(1);
              core.setOutput('target_branch', targetBranch);
            } else {
              core.setFailed('Error: Target branch is not in the valid vX.Y.Z format');
            }

      - name: "Get prs between"
        uses: VanOns/get-merged-pull-requests-action@v1
        id: pull_requests
        with:
          repo: ognyanstoimenov/ArcticDB
          github_token: ${{ github.token }}
          current_tag: master
          previous_tag: ${{ steps.verify_branch.outputs.target_branch }}
          return_type: "all"

      - name: Get labels of PRs and determine increment type
        id: get_increment_type
        uses: actions/github-script@v7
        env:
          PULL_REQUESTS: ${{ steps.pull_requests.outputs.pull_requests }}
          MAJOR_LABEL: major
          MINOR_LABEL: minor
          PATCH_LABEL: patch
        with:
          script: |
            const labels = JSON.parse(process.env.PULL_REQUESTS).flatMap(pr => pr.labels.map(label => label.name));
            core.info(`Labels: ${labels.join(', ')}`);

            let incrementType = 'patch';
            if (labels.includes(process.env.MAJOR_LABEL)) {
              console.log("Major changes found! Should increase major version.");
              incrementType = 'major';
            } else if (labels.includes(process.env.MINOR_LABEL)) {
              console.log("Minor changes found! Should increase minor version.");
              incrementType = 'minor';
            } else if (labels.includes(process.env.PATCH_LABEL)) {
              console.log("Patch changes found! Should increase patch version.");
            } else {
              console.log("No PRs labeled patch, minor or major found! Defaulting to 'patch'.");
            }

            core.setOutput('increment_type', incrementType);

      - name: Next SemVers
        id: get-next-version
        uses: WyriHaximus/github-action-next-semvers@v1.2.1
        with:
          version: ${{ steps.verify_branch.outputs.target_branch }}
      
      - name: Create and push new branch
        id: new-branch
        run: |
          NEW_BRANCH="${{ steps.get-next-version.outputs[steps.get_increment_type.outputs.increment_type] }}"
          if git ls-remote --exit-code --heads origin "$NEW_BRANCH"; then
            echo "Branch $NEW_BRANCH already exists on remote. Exiting..."
            exit 1
          fi

          echo "Will create $NEW_BRANCH..."
          # git checkout -b $NEW_BRANCH $BASE
          # git push origin $NEW_BRANCH
          echo "new_branch=$NEW_BRANCH" >> $GITHUB_OUTPUT

  # rc_release:
  #   uses: ./.github/workflows/rc_release.yml
  #   needs: get-prs
  #   with:
  #     branch_name: ${{ needs.get-prs.outputs.new_branch }}